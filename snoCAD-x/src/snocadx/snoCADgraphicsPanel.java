/*
 * Copyright 2007-2014 Daniel Graf (https://github.com/danielgraf)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * snoCADgraphicsPanel.java
 *
 * Created on 28 March 2007, 11:50
 */

package snocadx;
import javax.swing.event.ChangeEvent;
import javax.swing.event.TreeModelListener;

/**
 *
 * @author  dgraf
 */
public class snoCADgraphicsPanel extends javax.swing.JPanel {
    
    /** Creates new form snoCADgraphicsPanel */
    public snoCADgraphicsPanel(snoCADboardDisplay bp) {
        m_bp = bp;
        m_lastUsedPath = null;
        m_selectedIndex = 0;
       
        initComponents();

        
        m_opacity.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(ChangeEvent e) 
            {
                  m_currentGraphicsLibrary.getEntry(m_selectedIndex).setOpacity(m_opacity.getValue());
                  m_bp.repaint(); 
            }
        }) ;

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        m_buttonGroup = new javax.swing.ButtonGroup();
        m_scroller = new javax.swing.JScrollPane();
        m_tree = new javax.swing.JTree();
        m_toolbar = new javax.swing.JToolBar();
        m_loadGraphicButton = new javax.swing.JButton();
        m_deleteGraphicButton = new javax.swing.JButton();
        m_stretch = new javax.swing.JRadioButton();
        m_float = new javax.swing.JRadioButton();
        m_tile = new javax.swing.JCheckBox();
        m_opacity = new javax.swing.JSlider();
        layerLabel = new javax.swing.JLabel();
        m_tileHeightLabel = new javax.swing.JLabel();
        opacityLabel = new javax.swing.JLabel();
        m_layerUp = new javax.swing.JButton();
        m_tileWidth = new javax.swing.JTextField();
        m_tileHeight = new javax.swing.JTextField();
        m_tileWidthLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Board Graphics"));
        setAutoscrolls(true);
        setDoubleBuffered(false);
        setFocusable(false);
        m_tree.setFocusable(false);
        m_scroller.setViewportView(m_tree);

        m_toolbar.setFloatable(false);
        m_loadGraphicButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Open16.gif")));
        m_loadGraphicButton.setToolTipText("load graphic");
        m_loadGraphicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onLoadNewGraphic(evt);
            }
        });

        m_toolbar.add(m_loadGraphicButton);

        m_deleteGraphicButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/Delete16.gif")));
        m_deleteGraphicButton.setToolTipText("remove graphic");
        m_deleteGraphicButton.setEnabled(false);
        m_deleteGraphicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onRemoveGraphic(evt);
            }
        });

        m_toolbar.add(m_deleteGraphicButton);

        m_buttonGroup.add(m_stretch);
        m_stretch.setText("Stretch");
        m_stretch.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        m_stretch.setEnabled(false);
        m_stretch.setMargin(new java.awt.Insets(0, 0, 0, 0));
        m_stretch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSetStretch(evt);
            }
        });

        m_buttonGroup.add(m_float);
        m_float.setText("Float");
        m_float.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        m_float.setEnabled(false);
        m_float.setMargin(new java.awt.Insets(0, 0, 0, 0));
        m_float.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSetFloat(evt);
            }
        });

        m_tile.setText("Tile");
        m_tile.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        m_tile.setEnabled(false);
        m_tile.setMargin(new java.awt.Insets(0, 0, 0, 0));
        m_tile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onSetTile(evt);
            }
        });

        m_opacity.setForeground(new java.awt.Color(255, 255, 255));
        m_opacity.setMajorTickSpacing(10);
        m_opacity.setMinorTickSpacing(5);
        m_opacity.setOrientation(javax.swing.JSlider.VERTICAL);
        m_opacity.setPaintTicks(true);
        m_opacity.setEnabled(false);

        layerLabel.setText("Layer");
        layerLabel.setEnabled(false);

        m_tileHeightLabel.setText("Tile Height");
        m_tileHeightLabel.setEnabled(false);

        opacityLabel.setText("Opacity");
        opacityLabel.setEnabled(false);

        m_layerUp.setText("Move Up");
        m_layerUp.setEnabled(false);
        m_layerUp.setPreferredSize(new java.awt.Dimension(40, 23));
        m_layerUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnLayerIncrease(evt);
            }
        });

        m_tileWidth.setText("100");
        m_tileWidth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnChangeTileWidth(evt);
            }
        });

        m_tileHeight.setText("100");
        m_tileHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnChangeTileHeight(evt);
            }
        });

        m_tileWidthLabel.setText("Tile Width");
        m_tileWidthLabel.setEnabled(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, m_toolbar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, m_scroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(m_layerUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(26, 26, 26))
                                    .add(layout.createSequentialGroup()
                                        .add(m_stretch, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                                    .add(layout.createSequentialGroup()
                                        .add(m_tile)
                                        .add(74, 74, 74))
                                    .add(layout.createSequentialGroup()
                                        .add(layerLabel)
                                        .add(80, 80, 80))
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(m_tileHeightLabel)
                                            .add(m_tileWidthLabel))
                                        .add(14, 14, 14)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(m_tileHeight, 0, 0, Short.MAX_VALUE)
                                            .add(m_tileWidth, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(layout.createSequentialGroup()
                                .add(m_float)
                                .add(66, 66, 66)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(opacityLabel)
                            .add(m_opacity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(m_toolbar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_scroller, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(m_float)
                    .add(opacityLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(m_stretch)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(m_tile)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(m_tileHeightLabel)
                            .add(m_tileHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(m_tileWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(m_tileWidthLabel))
                        .add(15, 15, 15)
                        .add(layerLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(m_layerUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(m_opacity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void OnChangeTileWidth(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnChangeTileWidth
        
        m_currentGraphicsLibrary.getEntry(m_selectedIndex).setTileWidth(Integer.valueOf(m_tileWidth.getText()));
        m_bp.updateGraphicsPanel();
        m_tree.setSelectionPath(m_bp.getBoard().getGraphics().getEntry(m_selectedIndex).getStretcher().getTreePath());
        m_bp.repaint(); 
        
    }//GEN-LAST:event_OnChangeTileWidth

    private void OnChangeTileHeight(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnChangeTileHeight

        m_currentGraphicsLibrary.getEntry(m_selectedIndex).setTileHeight(Integer.valueOf(m_tileHeight.getText()));
        m_bp.updateGraphicsPanel();
        m_tree.setSelectionPath(m_bp.getBoard().getGraphics().getEntry(m_selectedIndex).getStretcher().getTreePath());
        m_bp.repaint(); 
    }//GEN-LAST:event_OnChangeTileHeight

    private void onSetTile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSetTile
      
       int tiled = 0;
       if (m_tile.isSelected()) tiled = 1;
       m_tile.setSelected(m_tile.isSelected());
       m_tileWidth.setEnabled(m_tile.isSelected());
       m_tileWidthLabel.setEnabled(m_tile.isSelected());
       m_tileHeight.setEnabled(m_tile.isSelected());
       m_tileHeightLabel.setEnabled(m_tile.isSelected());
       m_currentGraphicsLibrary.getEntry(m_selectedIndex).setRenderMode(tiled);
       m_bp.updateGraphicsPanel();
       m_tree.setSelectionPath(m_bp.getBoard().getGraphics().getEntry(m_selectedIndex).getStretcher().getTreePath());
       m_bp.repaint(); 
    }//GEN-LAST:event_onSetTile

    private void OnLayerIncrease(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnLayerIncrease
      
       if (m_currentGraphicsLibrary.getEntry(m_selectedIndex).getLayer() == m_currentGraphicsLibrary.getSize()) return;
       
       m_currentGraphicsLibrary.getEntry(m_selectedIndex).setLayer(m_currentGraphicsLibrary.getEntry(m_selectedIndex).getLayer() + 1.2);

       m_currentGraphicsLibrary.sort();
       m_selectedIndex += 1;
       m_bp.updateGraphicsPanel();
       m_tree.setSelectionPath(m_bp.getBoard().getGraphics().getEntry(m_selectedIndex).getStretcher().getTreePath());
       if (m_currentGraphicsLibrary.getEntry(m_selectedIndex).getLayer() == m_currentGraphicsLibrary.getSize()) m_layerUp.setEnabled(false);
       
       m_bp.repaint(); 
    }//GEN-LAST:event_OnLayerIncrease

    private void onSetStretch(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSetStretch
    
        m_currentGraphicsLibrary.getEntry(m_selectedIndex).setPositionMode(snoCADgraphicElement.STRETCH);
        m_currentGraphicsLibrary.getEntry(m_selectedIndex).getStretcher().hideHandle();
        m_currentGraphicsLibrary.getEntry(m_selectedIndex).getDragger().hideHandle();
        m_currentGraphicsLibrary.getEntry(m_selectedIndex).getRotator().hideHandle();
        m_bp.repaint();
    }//GEN-LAST:event_onSetStretch

    private void onSetFloat(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onSetFloat

        m_currentGraphicsLibrary.getEntry(m_selectedIndex).setPositionMode(snoCADgraphicElement.FLOAT);
        m_bp.repaint();
    }//GEN-LAST:event_onSetFloat

    private void onRemoveGraphic(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onRemoveGraphic
        m_currentGraphicsLibrary.deleteElement(m_selectedIndex);
        m_currentGraphicsLibrary.reLayer();
        m_bp.repaint();
        setTree(m_currentGraphicsLibrary);
        disableImageTools();
    }//GEN-LAST:event_onRemoveGraphic

    private void onLoadNewGraphic(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onLoadNewGraphic

        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser(m_lastUsedPath);
        fc.setFileFilter(new snoCADfileFilters().getGraphicsFilter());
        
        fc.setDialogTitle("Import Graphic...");
        
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) 
        {
            java.io.File importFile = fc.getSelectedFile();
            
            try 
            {
                m_lastUsedPath = importFile.getCanonicalPath();
            } 
            catch (java.io.IOException ex) 
            {
                ex.printStackTrace();
            }
            
            if (importFile != null)
            {
                java.awt.image.BufferedImage boardGraphic = null;
             
                try 
                {
                    boardGraphic = javax.imageio.ImageIO.read(importFile);
                } 
                catch (java.io.IOException e) 
                {
                }
                catch (java.lang.OutOfMemoryError e)
                {
                    Main.alert("Cannot load graphic - not enough memory available");
                }

            
                if (boardGraphic != null)
                { 
                    m_bp.getBoard().addBoardGraphic(boardGraphic, importFile.getName());
                    m_bp.updateGraphicsPanel();
                    m_bp.repaint();
                    
                }
            }
        } 
        else 
        {
            // File was not opened
        }
    }//GEN-LAST:event_onLoadNewGraphic

    public void setTree(snoCADgraphicsLibrary lib)
    {
        
        int size = lib.getSize();
        int i = 0;
        
        snoCADgraphicsNode rootNode = new snoCADgraphicsNode("Graphics");
        
        javax.swing.tree.DefaultTreeModel tm = new javax.swing.tree.DefaultTreeModel(rootNode);
        
        //Enable tool tips.
        javax.swing.ToolTipManager.sharedInstance().registerComponent(m_tree);
        
        tm.addTreeModelListener(new snoCADtreeUpdater());
        javax.swing.tree.DefaultMutableTreeNode childNode = new  javax.swing.tree.DefaultMutableTreeNode("test");
        
        m_tree = new javax.swing.JTree(tm);
        m_tree.setEditable(true);
        
        m_tree.addTreeSelectionListener(new snoCADtreeSelectionListener());
        
        javax.swing.tree.DefaultTreeCellRenderer p = new javax.swing.tree.DefaultTreeCellRenderer();
        
        p.setBackgroundNonSelectionColor(java.awt.Color.white);
        p.setTextNonSelectionColor(java.awt.Color.darkGray);

        if (size > 0)
        {
  
        while(i <= size - 1)
        {
            snoCADgraphicElement thisElement = (snoCADgraphicElement) lib.getEntry(i); 
            
            childNode = new snoCADgraphicsNode(thisElement);

            
            tm.insertNodeInto(childNode, rootNode, rootNode.getChildCount());

            thisElement.getDragger().setTreePath(new javax.swing.tree.TreePath(tm.getPathToRoot(childNode)));
            thisElement.getStretcher().setTreePath(new javax.swing.tree.TreePath(tm.getPathToRoot(childNode)));
            thisElement.getRotator().setTreePath(new javax.swing.tree.TreePath(tm.getPathToRoot(childNode)));
 
            i++;
        }
        
        }
        
       m_currentGraphicsLibrary = lib;

       m_tree.scrollPathToVisible(new javax.swing.tree.TreePath(tm.getPathToRoot(childNode)));

       m_scroller.getViewport().add(m_tree);
       
       repaint();

    
    }
    
    class snoCADgraphicsNode extends javax.swing.tree.DefaultMutableTreeNode
    {
        public snoCADgraphicsNode(snoCADgraphicElement element)
        {
            setUserObject(element.getLayer() + " " + element.getName());
            setGraphicElement(element);
        }
        
        public snoCADgraphicsNode(String name)
        {
            setUserObject(name);
            setGraphicElement(null);
        }
        
        private snoCADgraphicElement m_graphicElement;
        
        public void setGraphicElement(snoCADgraphicElement element) { m_graphicElement = element;}
        
        public snoCADgraphicElement getGraphicElement() { return m_graphicElement; }
    }
    
    class snoCADtreeSelectionListener implements javax.swing.event.TreeSelectionListener
    {
        public void valueChanged(javax.swing.event.TreeSelectionEvent e)
        {

            snoCADgraphicsNode selectedNode = (snoCADgraphicsNode)m_tree.getLastSelectedPathComponent();
            
            if (selectedNode == null) return;
            
            enableImageTools();
            
            if (selectedNode.isRoot()) {  m_bp.eraseHandles(); disableImageTools(); return; }

            snoCADgraphicElement thisElement = selectedNode.getGraphicElement();
            
            m_selectedIndex = (int)thisElement.getLayer() - 1;
            
            if (m_currentGraphicsLibrary.getEntry(m_selectedIndex).getLayer() == m_currentGraphicsLibrary.getSize()) 
            {
                m_layerUp.setEnabled(false);
            }
            else
            {
                m_layerUp.setEnabled(true);
            }


            m_opacity.setEnabled(thisElement.getImage().getColorModel().hasAlpha() && (thisElement.getImage().getType() != 12) && (thisElement.getImage().getType() != 13) );
            opacityLabel.setEnabled(m_opacity.isEnabled());
            
            m_opacity.setValue(thisElement.getOpacity());
            
            if (thisElement.getPositionMode() == snoCADgraphicElement.STRETCH)
            {
                m_stretch.setSelected(true);
                m_float.setSelected(false);
            }
            else
            {
                m_stretch.setSelected(false);
                m_float.setSelected(true);
            }
            
            if (thisElement.getRenderMode() == snoCADgraphicElement.TILED)
            {
                m_tile.setSelected(true);
                m_tileWidth.setEnabled(true);
                m_tileWidthLabel.setEnabled(true);
                m_tileWidth.setText(String.valueOf(thisElement.getTileWidth()));
                m_tileHeight.setEnabled(true);
                m_tileHeightLabel.setEnabled(true);
                m_tileHeight.setText(String.valueOf(thisElement.getTileHeight()));
            }
            else
            {
                m_tile.setSelected(false);
                m_tileHeight.setEnabled(false);
                m_tileHeightLabel.setEnabled(false);
                m_tileWidth.setEnabled(false);
                m_tileWidthLabel.setEnabled(false);                
            }
            
            m_bp.eraseHandles();
            
            thisElement.getDragger().setVisible(true);
            thisElement.getStretcher().setVisible(true);
            thisElement.getRotator().setVisible(true);

            m_bp.repaint();
            

        }
        
    }
    
    public javax.swing.JTree getTree()
    {
        return m_tree;
    }
    
    public void enableImageTools()
    {
            m_stretch.setEnabled(true);
            m_tile.setEnabled(true);
            m_opacity.setEnabled(true);
            m_float.setEnabled(true);
            m_tile.setSelected(true);
            m_tileWidth.setEnabled(true);
            m_tileWidthLabel.setEnabled(true);
            m_tileHeight.setEnabled(true);
            m_tileHeightLabel.setEnabled(true);
            m_deleteGraphicButton.setEnabled(true);
            opacityLabel.setEnabled(true);
            layerLabel.setEnabled(true);

    }
    
    public void disableImageTools()
    {
            m_stretch.setEnabled(false);
            m_tile.setEnabled(false);
            m_opacity.setEnabled(false);
            m_float.setEnabled(false);
           // m_layerUp.setEnabled(false);
            m_tile.setSelected(false);
            m_tileHeight.setEnabled(false);
            m_tileHeightLabel.setEnabled(false);
            m_tileWidth.setEnabled(false);
            m_tileWidthLabel.setEnabled(false);      
            m_deleteGraphicButton.setEnabled(false);
            opacityLabel.setEnabled(false);
            layerLabel.setEnabled(false);

    }
    
    class snoCADtreeUpdater implements TreeModelListener 
    {
        public void treeNodesChanged(javax.swing.event.TreeModelEvent e) 
        {
            javax.swing.tree.DefaultMutableTreeNode node;
            node = (javax.swing.tree.DefaultMutableTreeNode)(e.getTreePath().getLastPathComponent());

        try 
        {
            int index = e.getChildIndices()[0];
            node = (javax.swing.tree.DefaultMutableTreeNode) (node.getChildAt(index));
        } 
        catch (NullPointerException exc) 
        {
            
        }

    }
    public void treeNodesInserted(javax.swing.event.TreeModelEvent e) 
    {
        
    }
    
    public void treeNodesRemoved(javax.swing.event.TreeModelEvent e) 
    {
    }
    
    public void treeStructureChanged(javax.swing.event.TreeModelEvent e) 
    {
        javax.swing.tree.DefaultMutableTreeNode node;
        node = (javax.swing.tree.DefaultMutableTreeNode)(e.getTreePath().getLastPathComponent());
    }
}
    
    class snoCADtreeRenderer extends javax.swing.tree.DefaultTreeCellRenderer 
    {
        javax.swing.Icon m_icon;

    public snoCADtreeRenderer(javax.swing.Icon icon) 
    {
        m_icon = icon;
    }

    public java.awt.Component getTreeCellRendererComponent(
                        javax.swing.JTree tree,
                        Object value,
                        boolean sel,
                        boolean expanded,
                        boolean leaf,
                        int row,
                        boolean hasFocus) 
    {

        super.getTreeCellRendererComponent(
                        tree, value, sel,
                        expanded, leaf, row,
                        hasFocus);
        
        if (leaf) 
        {
            setIcon(m_icon);
            setToolTipText("snowboard graphic");
        }
        else 
        {
            setToolTipText(null); //no tool tip
        } 

        return this;
    }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel layerLabel;
    private javax.swing.ButtonGroup m_buttonGroup;
    private javax.swing.JButton m_deleteGraphicButton;
    private javax.swing.JRadioButton m_float;
    private javax.swing.JButton m_layerUp;
    private javax.swing.JButton m_loadGraphicButton;
    private javax.swing.JSlider m_opacity;
    private javax.swing.JScrollPane m_scroller;
    private javax.swing.JRadioButton m_stretch;
    private javax.swing.JCheckBox m_tile;
    private javax.swing.JTextField m_tileHeight;
    private javax.swing.JLabel m_tileHeightLabel;
    private javax.swing.JTextField m_tileWidth;
    private javax.swing.JLabel m_tileWidthLabel;
    private javax.swing.JToolBar m_toolbar;
    private javax.swing.JTree m_tree;
    private javax.swing.JLabel opacityLabel;
    // End of variables declaration//GEN-END:variables
    private snoCADboardDisplay m_bp;
    private snoCADgraphicsLibrary m_currentGraphicsLibrary;
    private int m_selectedIndex;
    private String m_lastUsedPath;

}
