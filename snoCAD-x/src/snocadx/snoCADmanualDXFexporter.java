/*
 * Copyright 2007-2014 Daniel Graf (https://github.com/danielgraf)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * snoC+xfExporter.java
 *
 * Created on 30 March 2007, 18:52
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package snocadx;

import java.io.IOException;

/**
 *
 * @author dgraf
 */
public class snoCADmanualDXFexporter 
{
    private static String crlf = "\r\n";
    
    /** Creates a new instance of snoC+xfExporter */
    public snoCADmanualDXFexporter() 
    {
      m_polyLineSpacing = 1;
      m_dxfData = "";
    }
    
    public void addHeader(java.io.BufferedWriter out)
    {
        String header = "999" + crlf;
        header += "DXF generated by snoCAD-X" + crlf + "0" + crlf;
	
	header += "SECTION" + crlf + "2" + crlf;
	header += "ENTITIES" + crlf + "0" + crlf;
        

        try
        {
            out.write(header);
            out.flush();
        }
        catch (IOException ex) 
        {
            ex.printStackTrace();
        }
        
	
    }
    
    public void addTrailer(java.io.BufferedWriter out)
    {
        String trailer = "ENDSEC" + crlf + "0" + crlf +"EOF" + crlf;
        
        try
        {
            out.write(trailer);
            out.flush();
        }
        catch (IOException ex) 
        {
            ex.printStackTrace();
        }
        
    }

    public boolean createDXF(snoCADboardDisplay bp, snoCADboard board, java.io.File outputFile, snoCADdxfExportFilter exp)
    {
        m_bp = bp;
        double scaleFactor = m_bp.getBoard().getScaleFactor();
        m_bp.getBoard().setScaleFactor(0.3);
        m_dxfData = "";
        m_board = m_bp.getBoard();

        
        try 
        { 
            java.io.BufferedWriter out = new java.io.BufferedWriter(new java.io.FileWriter(outputFile.getCanonicalPath()));
            addHeader(out);
            
            if (exp.getInserts()) drawInserts(out);
            if (exp.getAlignmentHoles()) drawAlignmentHoles(out);
            if (exp.getStanceLocators()) drawStanceLocators(out);
            if (exp.getNoseIdentHole()) drawIdentHole(out);
            
            if (exp.getBoardOutline()) drawObject(m_bp.getBoardGeometry(), "BOARD", 0, out);
            if (exp.getCoreOutline()) drawObject(m_bp.getCoreGeometry(), "CORE", 0, out );
            
            if (exp.getBaseProfile()) drawObject(m_bp.getProfileGeometry(), "PROFILE", 0 , out);
            if (exp.getCoreProfile()) drawObject(m_bp.getFlexGeometry(), "FLEX", 0, out);
            if (exp.getNoseTS()) drawObject(m_bp.getNoseTipspacerGeometry(), "NOSE_TS", 0, out);
            if (exp.getTailTS()) drawObject(m_bp.getTailTipspacerGeometry(), "TAIL_TS", 0, out);
            
            addTrailer(out);
            out.close();
        } 
        catch (IOException ex) 
        {
            ex.printStackTrace();
        }

        m_bp.getBoard().setScaleFactor(scaleFactor);
        
        return true;
        
    }
    
    private void drawInserts(java.io.BufferedWriter out)
    {

        java.util.ArrayList<snoCADutilities.point> points = m_bp.getInsertGeometry();
        
        for(int i = 0; i < points.size(); i++)
        {
            drawCircle(points.get(i).x * m_board.getScaleFactor(), 0 - points.get(i).y * m_board.getScaleFactor(), 3.0f, out);
        }
      
    }
    
     private void drawAlignmentHoles(java.io.BufferedWriter out)
    {

        java.util.ArrayList<snoCADutilities.point> points = m_bp.getAlignmentHoleGeometry();
        
        for(int i = 0; i < points.size(); i++)
        {
            drawCircle(points.get(i).x * m_board.getScaleFactor(), 0 - points.get(i).y * m_board.getScaleFactor(), 1f, out);
        }
      
    }
     
     private void drawStanceLocators(java.io.BufferedWriter out)
    {

        java.util.ArrayList<snoCADutilities.point> points = m_bp.getStanceLocatorGeometry();
        
        for(int i = 0; i < points.size(); i++)
        {
            drawCircle(points.get(i).x * m_board.getScaleFactor(), 0 - points.get(i).y * m_board.getScaleFactor(), 1.5f, out);
        }
      
    }
    
     private void drawIdentHole(java.io.BufferedWriter out)
    {

        java.util.ArrayList<snoCADutilities.point> points = m_bp.getIdentHoleGeometry();
        
        for(int i = 0; i < points.size(); i++)
        {
            drawCircle(points.get(i).x * m_board.getScaleFactor(), 0 - points.get(i).y * m_board.getScaleFactor(), 5f, out);
        }
      
    }
    
    private void drawObject(java.awt.geom.Path2D.Double path, String name, int colour, java.io.BufferedWriter out)
    {
        try
        {
            out.write("POLYLINE" + crlf + "8" + crlf + "BOARD" + crlf + "66" + crlf + "1" + crlf + "70" + crlf + "0" + crlf + "0" + crlf);
            out.flush();
        }
        catch (IOException ex) 
        {
            ex.printStackTrace();
        }
        
        java.awt.geom.PathIterator pI = path.getPathIterator(null, 0);

        while (!pI.isDone())
        {
            double[] coords = new double[2];
            pI.currentSegment(coords);
            coords[0] = coords[0] * m_board.getScaleFactor();
            coords[1] = coords[1] * m_board.getScaleFactor();
            snoCADutilities.point coordsPoint = new snoCADutilities.point(coords[0], 0 - coords[1]);
            
            try
            {
                out.write("VERTEX" + crlf + "8" + crlf + name + crlf + "10" + crlf + "" + coordsPoint.x + "" + crlf + "20" + crlf + "" + coordsPoint.y + "" + crlf + "0" + crlf);
                out.flush();
            }
            catch (IOException ex) 
            {
                ex.printStackTrace();
            }
            pI.next();
        }
        
        try
        {
            out.write("SEQEND" + crlf + "0" + crlf);
            out.flush();
        }
        catch (IOException ex) 
        {
            ex.printStackTrace();
        }

    }
    
    private void drawCircle(double x, double y, double radius, java.io.BufferedWriter out)
    {
        try
        {
            out.write("CIRCLE" + crlf + "8" + crlf + "INSERTS" + crlf + "10" + crlf + "" + x + "" + crlf + "20" + crlf + "" + y + "" + crlf + "40" + crlf + "" + radius + "" + crlf + "0" + crlf);
            out.flush();
        }
        catch (IOException ex) 
        {
            ex.printStackTrace();
        }
    }
    
    private void addPointToCurve(snoCADutilities.point p, java.util.ArrayList curve)
    {
        curve.add((snoCADutilities.point)p); 
    }
    
  
    
  

    private snoCADboard m_board;
    private double m_polyLineSpacing;
    private snoCADboardDisplay m_bp;
    private String m_dxfData;
    
}
