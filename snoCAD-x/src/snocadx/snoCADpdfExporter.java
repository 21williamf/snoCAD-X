/*
 * Copyright 2007-2014 Daniel Graf (https://github.com/danielgraf)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * snoCADpdfExporter.java
 *
 * Created on 22 April 2007, 09:29
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package snocadx;


/**
 *
 * @author dgraf
 */
public class snoCADpdfExporter 
{
    
    /** Creates a new instance of snoCADpdfExporter */
    public snoCADpdfExporter() 
    {
    }
    
    public double pdfScale(int i)
    {
        double retVal = i / 10;
        retVal = retVal / 2.54;
        retVal = retVal * 72;
        return retVal;
    }
    
    public double pdfScale(double i)
    {
        double retVal = i / 10;
        retVal = retVal / 2.54;
        retVal = retVal * 72;
        return retVal;
    }
    
    public float pdfScaleFloat(double i)
    {
        float retVal = (float)i / 10.0f;
        retVal = retVal / 2.54f;
        retVal = retVal * 72.0f;
        return retVal;
    }
    
    public float pdfScaleFloat(int i)
    {
        float retVal = i / 10.0f;
        retVal = retVal / 2.54f;
        retVal = retVal * 72.0f;
        return retVal;
    }
    
    public int pdfScaleInt(int i)
    {
        return (int)Math.round(pdfScale(i));
    }
    
    public int pdfScaleInt(double i)
    {
        return pdfScaleInt((int)Math.round(i));
    }
    
    public void exportBoardImage(java.io.File pngFile, int content)
    {
        
        double originalScaleFactor = m_board.getScaleFactor();
        
        try 
        {
            java.awt.image.BufferedImage bi = m_bp.getImageOfWorkspace(content, 4096); // retrieve image
            javax.imageio.ImageIO.write(bi, "png", pngFile);
        } 
        catch (java.io.IOException e)
        {
            
        }
        
        m_bp.getGraphicsContext().dispose();
        m_bp.originCentre();
        m_board.setScaleFactor(2.6);
        m_bp.repaint();
        
        return; 
    }
   
    public void exportBoardDossier(java.io.File pdfFile)
    {
        
        int width = (int)Math.round((29.7 / 2.54) * 72);//m_bp.getImageOfWorkspace(0).getWidth();
        int height = (int)Math.round((21.0 / 2.54) * 72); //m_bp.getImageOfWorkspace(0).getHeight();
       
        
        double originalScaleFactor = m_board.getScaleFactor();
        com.lowagie.text.Font mainTitle = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA_BOLD, 24, com.lowagie.text.Font.BOLD);
        com.lowagie.text.Font subTitle = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 16, com.lowagie.text.Font.NORMAL);
        com.lowagie.text.Font normalText = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 12, com.lowagie.text.Font.NORMAL);
        com.lowagie.text.Font credits = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 8, com.lowagie.text.Font.BOLD);
        subTitle.setColor(java.awt.Color.LIGHT_GRAY);
        double scaleFactor = height / width;
        
        com.lowagie.text.Rectangle sizeRect = new com.lowagie.text.Rectangle(width, height);
        com.lowagie.text.Document document = new com.lowagie.text.Document(sizeRect);
        
        try 
        {
            int resolutionFactor = 4;
	    com.lowagie.text.pdf.PdfWriter writer = com.lowagie.text.pdf.PdfWriter.getInstance(document, new java.io.FileOutputStream(pdfFile.getAbsolutePath()));	
	    document.open();
            com.lowagie.text.Image logo = null;
            
            document.add(sizeRect);
            document.add(new com.lowagie.text.Paragraph(m_board.getBoardName() + " " + m_board.getLength() / 10, mainTitle));
            document.add(new com.lowagie.text.Paragraph("Design Specification", subTitle));
            credits.setColor(java.awt.Color.LIGHT_GRAY);
            document.add(new com.lowagie.text.Paragraph("Generated by snoCAD-X - www.grafsnowboards.com", credits));
            
            java.io.File logoGraphicFile = new java.io.File(Main.getBrandLogo());
            
            if ((logoGraphicFile != null) && Main.getBrandLogo() != "")
            {
                java.awt.image.BufferedImage boardGraphic = null;
             
                try 
                {
                    boardGraphic = javax.imageio.ImageIO.read(logoGraphicFile);
                } 
                catch (java.io.IOException e) 
                {
                    Main.alert("Cannot load Brand Logo : " + Main.getBrandLogo());
                }
                catch (java.lang.OutOfMemoryError e)
                {
                    Main.alert("Cannot load graphic - not enough memory available");
                }

            
                if (boardGraphic != null)
                { 
                    logo = com.lowagie.text.Image.getInstance(boardGraphic, null);
                    float scaleRatio = 150 / logo.getWidth();
                    logo.scaleAbsolute(150,logo.getHeight() * scaleRatio);
                    logo.setAbsolutePosition(width - 160, 10);
                    
                }
            
            } 
            else 
            {
            }
        
            java.awt.image.BufferedImage boardImg = m_bp.getImageOfWorkspace(2, width * resolutionFactor);
            com.lowagie.text.Image img = com.lowagie.text.Image.getInstance(boardImg, null);
            img.scaleAbsoluteWidth(width);
            img.scaleAbsoluteHeight(boardImg.getHeight() / resolutionFactor);
            img.setAbsolutePosition(0, (height - (boardImg.getHeight() / resolutionFactor)) / 2);
            document.add(img);
            if (logo != null) document.add(logo);
            
            document.newPage();
            document.add(sizeRect);
            document.add(new com.lowagie.text.Paragraph("topsheet", subTitle));
            boardImg = m_bp.getImageOfWorkspace(0, width * resolutionFactor);
            img = com.lowagie.text.Image.getInstance(boardImg, null);
            img.scaleAbsoluteWidth(width);
            img.scaleAbsoluteHeight(boardImg.getHeight() / resolutionFactor);
            img.setAbsolutePosition(0, (height - (boardImg.getHeight() / resolutionFactor)) / 2);
            document.add(img);
            if (logo != null) document.add(logo);

            document.newPage();
            document.add(sizeRect);
            document.add(new com.lowagie.text.Paragraph("core construction", subTitle));
            boardImg = m_bp.getImageOfWorkspace(1, width * resolutionFactor);
            img = com.lowagie.text.Image.getInstance(boardImg, null);
            img.scaleAbsoluteWidth(width);
            img.scaleAbsoluteHeight(boardImg.getHeight() / resolutionFactor);
            img.setAbsolutePosition(0, (height - (boardImg.getHeight() / resolutionFactor)) / 2);
            document.add(img);
            if (logo != null) document.add(logo);
            
            document.newPage();
            document.add(sizeRect);
            document.add(new com.lowagie.text.Paragraph("specifications - " + m_board.getBoardName() + " " + m_board.getLength() / 10, subTitle));
            com.lowagie.text.pdf.PdfContentByte cb = writer.getDirectContent();
            com.lowagie.text.pdf.PdfPTable dimTable = getDimensionsTable(0);
            dimTable.beginWritingRows(cb);
            dimTable.setTotalWidth(width - 80);
            int num = dimTable.getRows().size();
            dimTable.writeSelectedRows(0,num,40,height - 80,cb);
            
            if (logo != null) document.add(logo);

        }
        catch (com.lowagie.text.DocumentException de) 
        {
	    System.err.println(de.getMessage());
	} 
        catch (java.io.IOException ioe) 
        {
	    System.err.println(ioe.getMessage());
	}

	document.close();
        m_bp.getGraphicsContext().dispose();
        m_bp.originCentre();
        m_board.setScaleFactor(2.6);
        m_bp.repaint();
                                   
        
    }
    public boolean exportBoardGraphics(java.io.File pdfFile, boolean baseFlag, boolean RGBflag)
    {
        // step 1: creation of a document-object
 
                int maxWidth = (int)Math.round(m_board.getScaleFactor() * m_bp.getBoardGeometry().getBounds2D().getHeight());
                maxWidth += m_board.getGraphicsPrintBorder() * 2;
                maxWidth -= 10;
                com.lowagie.text.pdf.PdfWriter writer = null;
                
                int requiredLength =  100;
                if (baseFlag == false) requiredLength = (m_board.getGraphicsPrintBorder() * 2);
                
                com.lowagie.text.Rectangle sizeRect = new com.lowagie.text.Rectangle(pdfScaleInt(m_board.getLength() + (requiredLength)), pdfScaleInt(maxWidth));
                sizeRect.setBackgroundColor(m_board.getBoardFillColour());
                com.lowagie.text.Document document = new com.lowagie.text.Document(sizeRect);
                
               
		try {
			// step 2:
			// we create a writer that listens to the document
			// and directs a PDF-stream to a file

			writer = com.lowagie.text.pdf.PdfWriter.getInstance(document, new java.io.FileOutputStream(pdfFile.getAbsolutePath()));
                        writer.setRgbTransparencyBlending(RGBflag);
			// step 3: we open the document
			document.open();
                        document.add(sizeRect);
                        
                        
                        
                if (m_board.getGraphics().getSize() > 0)
                { 
                for (int i = 0; i < m_board.getGraphics().getSize(); i++)
                {

                    int width =  (int)Math.round(m_board.getGraphics().getEntry(i).getWidth());
                    int height = (int)Math.round(m_board.getGraphics().getEntry(i).getHeight());
                    
                    int positionX = (int)Math.round(m_board.getGraphics().getEntry(i).getPosX());
                    positionX = positionX + m_board.getGraphicsPrintBorder();
                    int positionY = (int)Math.round(m_board.getGraphics().getEntry(i).getPosY());
                   
                    positionY = (0 - positionY) + (maxWidth / 2);
                    
                    positionY = positionY - height;
                    
                    if (m_board.getGraphics().getEntry(i).getPositionMode() == snoCADgraphicElement.STRETCH)
                    {
                        java.awt.geom.Path2D.Double p = m_bp.getBoardGeometry();
                        
                        positionX = 0;
                        positionY = 0 - m_board.getGraphicsPrintBorder();
                        width = m_board.getLength() + (requiredLength);
                        height = maxWidth + (m_board.getGraphicsPrintBorder() * 2);

                    }
                   
                    float opacity = (float)m_board.getGraphics().getEntry(i).getOpacity() / 100;

                    float[] scales = { 1f, 1f, 1f, opacity };
                    float[] offsets = new float[4];
                    java.awt.image.RescaleOp rop = new java.awt.image.RescaleOp(scales, offsets, null);
                    
                    java.awt.image.BufferedImage displayImage = null ; //new java.awt.image.BufferedImage(m_board.getGraphics().getEntry(i).getImage().getWidth(), 
                                                                       //                          m_board.getGraphics().getEntry(i).getImage().getHeight(), 
                                                                       //                          java.awt.image.BufferedImage.TYPE_INT_RGB);
                    displayImage = m_board.getGraphics().getEntry(i).getImage();
                    
                    if (m_board.getGraphics().getEntry(i).getImage().getColorModel().hasAlpha())
                    {
                        if ((m_board.getGraphics().getEntry(i).getImage().getType() != 12) && (m_board.getGraphics().getEntry(i).getImage().getType() != 13) ) // GIF// GIF
                        {
                            displayImage = rop.filter(displayImage, null);
                        }
                    }
                    
                     java.awt.TexturePaint paint = null;
                     
                     if (m_board.getGraphics().getEntry(i).getRenderMode() == snoCADgraphicElement.TILED)
                     {

                        java.awt.image.BufferedImage tileImg = m_board.getGraphics().getEntry(i).getImage();

                        int endTileWidth = pdfScaleInt(m_board.getGraphics().getEntry(i).getTileWidth());
                        int endTileHeight = pdfScaleInt(m_board.getGraphics().getEntry(i).getTileHeight());
                        com.lowagie.text.Image img = com.lowagie.text.Image.getInstance(tileImg, null);

                        img.scaleAbsolute(endTileWidth, endTileHeight);
                        
                        for (int y = (int)(sizeRect.getHeight() - endTileHeight); y >= (0 - endTileHeight); y -= endTileHeight)
                        {
                            for (int x = 0; x <= sizeRect.getWidth(); x += endTileWidth)
                            {
                                img.setAbsolutePosition(x, y);
                                document.add(img);
                            }
                        }
                     }
                     else
                     {
                 
                       //com.lowagie.text.Image img = com.lowagie.text.Image.getInstance(displayImage.getScaledInstance(pdfScaleInt(width), pdfScaleInt(height), 0), null);
                       com.lowagie.text.Image img = com.lowagie.text.Image.getInstance(displayImage, null);
                       img.setAbsolutePosition(pdfScaleFloat(positionX), pdfScaleFloat(positionY));
                       img.scaleAbsolute(pdfScaleFloat(width), pdfScaleFloat(height));
                       
                       if (m_board.getGraphics().getEntry(i).getAngle() > -1)
                       {
                           
                           com.lowagie.text.pdf.PdfContentByte cb = writer.getDirectContent();
                           
                    
                               java.awt.geom.Point2D.Double rotatorPoint = new java.awt.geom.Point2D.Double();
                               rotatorPoint.setLocation(img.getAbsoluteX(), img.getAbsoluteY());
                               
                               java.awt.geom.Point2D.Double centrePoint = new java.awt.geom.Point2D.Double();
                               centrePoint.setLocation(img.getAbsoluteX() + (img.getScaledWidth() / 2), img.getAbsoluteY() + (img.getScaledHeight() /  2));
                               
                               //crosshair((float)rotatorPoint.x, (float)rotatorPoint.y, cb);
                               //crosshair((float)centrePoint.x, (float)centrePoint.y, cb);

                               img.setInitialRotation(0 - (float)Math.toRadians(m_board.getGraphics().getEntry(i).getAngle()));
                               
                               java.awt.geom.Point2D.Double newCentrePoint = new java.awt.geom.Point2D.Double();
                               newCentrePoint.setLocation(img.getAbsoluteX() + (img.getScaledWidth() / 2), img.getAbsoluteY() + (img.getScaledHeight() /  2));
                               //crosshair((float)newCentrePoint.x, (float)newCentrePoint.y, cb);
                              
                               float diffX = (float)newCentrePoint.x - (float)centrePoint.x;
                               float diffY = (float)newCentrePoint.y - (float)centrePoint.y;
                               
                               img.setAbsolutePosition(img.getAbsoluteX() - diffX, img.getAbsoluteY() - diffY);
                               
                               document.add(img);

                       }
                       else
                       {
            
                          document.add(img);
                       }
                     }
                     
                }
                }
			
		} catch (com.lowagie.text.DocumentException de) {
			System.err.println(de.getMessage());
		} catch (java.io.IOException ioe) {
			System.err.println(ioe.getMessage());
		}

		// step 5: we close the document
                
		document.close();

        return true;
    }
    
    public void crosshair(float x, float y, com.lowagie.text.pdf.PdfContentByte cb)
    {
                cb.setColorStroke(java.awt.Color.lightGray);
                cb.moveTo((float)(x - 5), y);
                cb.lineTo((float)(x + 5), y);
                cb.moveTo((float)(x ), (float)(y - 5));
                cb.lineTo((float)(x ), (float)(y + 5));
                cb.stroke();
        
    }
    public boolean exportSplitTemplate(java.io.File pdfFile, int paperWidth, int paperHeight, int object)
    {
        int overlap = 20;
        
        java.awt.geom.Path2D.Double geom = null;
        
        if (object == snoCADutilities.EDIT_BOARD) 
        {
            geom = m_bp.getBoardGeometry() ;
        }
        else if (object == snoCADutilities.EDIT_CORE)
        {
            geom = m_bp.getCoreGeometry();
        }
        else if (object == snoCADutilities.EDIT_NOSE_TIPSPACER)
        {
            m_bp.getCoreGeometry();
            geom = m_bp.getNoseTipspacerGeometry();
        }
        else if (object == snoCADutilities.EDIT_TAIL_TIPSPACER)
        {
            m_bp.getCoreGeometry();
            geom = m_bp.getTailTipspacerGeometry();
        }
        else if (object == snoCADutilities.EDIT_PROFILE)
        {
            geom = m_bp.getProfileGeometry();
        }
        else if (object == snoCADutilities.EDIT_FLEX)
        {
            geom = m_bp.getFlexGeometry();
        }
        else
        {
            geom = m_bp.getBoardGeometry();
        }
                
        int maxWidth = (int)Math.round(m_board.getScaleFactor() * geom.getBounds2D().getHeight());
        maxWidth += m_board.getGraphicsPrintBorder() * 2;
        
        double objectWidth = m_board.getScaleFactor() * geom.getBounds2D().getWidth();
        double objectHeight = m_board.getScaleFactor() * geom.getBounds2D().getHeight();
         
        int maxLength = (int)Math.round(m_board.getScaleFactor() * geom.getBounds2D().getWidth()) + (m_board.getGraphicsPrintBorder() * 2);
        
        double sheetsRequiredLongways = Math.ceil(maxLength / (paperWidth - overlap));
        double sheetsRequiredWidthways = Math.ceil(maxWidth / (paperHeight - overlap));
        
        com.lowagie.text.Rectangle sizeRect = new com.lowagie.text.Rectangle(pdfScaleFloat(paperWidth), pdfScaleFloat(paperHeight));
        com.lowagie.text.Document document = new com.lowagie.text.Document(sizeRect);
       
        
           try 
           {
               com.lowagie.text.Font mainTitle = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA_BOLD, 24, com.lowagie.text.Font.BOLD);
               com.lowagie.text.Font subTitle = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 16, com.lowagie.text.Font.NORMAL);
               com.lowagie.text.Font normalText = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 12, com.lowagie.text.Font.NORMAL);
               com.lowagie.text.Font credits = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 8, com.lowagie.text.Font.BOLD);

	       com.lowagie.text.pdf.PdfWriter writer = com.lowagie.text.pdf.PdfWriter.getInstance(document, new java.io.FileOutputStream(pdfFile.getAbsolutePath()));
               document.open();
               com.lowagie.text.pdf.PdfContentByte cb = writer.getDirectContent();
               
               for (int j = 0; j <= sheetsRequiredWidthways; j++)
               {
               for (int i = 0; i <= sheetsRequiredLongways; i++)
               {
               document.newPage(); 
               cb.setLineDash(pdfScaleFloat(2), pdfScaleFloat(1), 0f);
               cb.setColorStroke(java.awt.Color.lightGray);
               int offsetX = (paperWidth - overlap) * i;
               int offsetY = (paperHeight - overlap) * j;
               
               double currentX = 0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder());
               double currentY = pdfScaleFloat(m_board.getGraphicsPrintBorder() - offsetY);
               
               for (int line = 0; line <= objectWidth; line += 20)
               {
                   cb.moveTo((float)currentX + pdfScaleFloat(line), 0);
                   cb.lineTo((float)currentX + pdfScaleFloat(line), pdfScaleFloat(paperHeight));          
               }
               cb.stroke();
               cb.setColorStroke(java.awt.Color.red);
               cb.moveTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder()), pdfScaleFloat(m_board.getGraphicsPrintBorder() + objectHeight / 2) - pdfScaleFloat(offsetY));
               cb.lineTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder() + objectWidth), pdfScaleFloat(m_board.getGraphicsPrintBorder() + objectHeight / 2) - pdfScaleFloat(offsetY));
               
               cb.moveTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder()), pdfScaleFloat(m_board.getGraphicsPrintBorder() + 50 + objectHeight / 2) - pdfScaleFloat(offsetY));
               cb.lineTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder() + objectWidth), pdfScaleFloat(m_board.getGraphicsPrintBorder() + 50 + objectHeight / 2) - pdfScaleFloat(offsetY));
               
               cb.moveTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder()), pdfScaleFloat(m_board.getGraphicsPrintBorder() - 50 + objectHeight / 2) - pdfScaleFloat(offsetY));
               cb.lineTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder() + objectWidth), pdfScaleFloat(m_board.getGraphicsPrintBorder() - 50 + objectHeight / 2) - pdfScaleFloat(offsetY));
               
               cb.moveTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder()), pdfScaleFloat(m_board.getGraphicsPrintBorder() + objectHeight) - pdfScaleFloat(offsetY));
               cb.lineTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder() + objectWidth), pdfScaleFloat(m_board.getGraphicsPrintBorder() + objectHeight) - pdfScaleFloat(offsetY));
               
               cb.moveTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder()), pdfScaleFloat(m_board.getGraphicsPrintBorder() ) - pdfScaleFloat(offsetY));
               cb.lineTo(0 - pdfScaleFloat(offsetX) + pdfScaleFloat(m_board.getGraphicsPrintBorder() + objectWidth), pdfScaleFloat(m_board.getGraphicsPrintBorder() ) - pdfScaleFloat(offsetY));
               
               float noseWidePoint = pdfScaleFloat(m_board.getNoseLength());
               float tailWidePoint = noseWidePoint + pdfScaleFloat(m_board.getRunningLength());
               float boardCentrePoint = noseWidePoint + pdfScaleFloat(m_board.getRunningLength() / 2);
               
               float noseCoreWidePoint = pdfScaleFloat(m_board.getCoreNoseLength());
               
               float tailCoreWidePoint = noseCoreWidePoint + pdfScaleFloat(m_board.getRunningLength());
               float coreCentrePoint = noseCoreWidePoint + pdfScaleFloat(m_board.getRunningLength() / 2);
               
        
               double centreY = currentY + pdfScaleFloat(objectHeight / 2);
               
               if (object == snoCADutilities.EDIT_BOARD)
               {
                       cb.moveTo((float)currentX + noseWidePoint, 0);
                       cb.lineTo((float)currentX + noseWidePoint, pdfScaleFloat(paperHeight));
                       cb.moveTo((float)currentX + tailWidePoint, 0);
                       cb.lineTo((float)currentX + tailWidePoint, pdfScaleFloat(paperHeight));
                       cb.moveTo((float)currentX + boardCentrePoint, 0);
                       cb.lineTo((float)currentX + boardCentrePoint, pdfScaleFloat(paperHeight));
                       cb.circle((float)currentX + pdfScaleFloat(10), (float)centreY, pdfScaleFloat(5));
                       
               }
               
               if (object == snoCADutilities.EDIT_CORE)
               {
                       cb.moveTo((float)currentX + noseCoreWidePoint, 0);
                       cb.lineTo((float)currentX + noseCoreWidePoint, pdfScaleFloat(paperHeight));
                       cb.moveTo((float)currentX + tailCoreWidePoint, 0);
                       cb.lineTo((float)currentX + tailCoreWidePoint, pdfScaleFloat(paperHeight));
                       cb.moveTo((float)currentX + coreCentrePoint, 0);
                       cb.lineTo((float)currentX + coreCentrePoint, pdfScaleFloat(paperHeight));
                       cb.circle((float)currentX + pdfScaleFloat(10), (float)centreY, pdfScaleFloat(5));
               }
               
               
               
               cb.stroke();
               cb.setColorStroke(java.awt.Color.black);
               cb.setLineDash(0.0f);
               
               drawSplitObject(geom, cb, offsetX, offsetY); 
               
               if ((object == snoCADutilities.EDIT_CORE) || (object == snoCADutilities.EDIT_BOARD) )
               {
                   drawInserts(cb, (int)centreY, offsetX, offsetY, object);
               }
               
               }
               }

           }
           catch (com.lowagie.text.DocumentException de) 
           {
	       System.err.println(de.getMessage());
	   } 
           catch (java.io.IOException ioe) 
           {
	        System.err.println(ioe.getMessage());
	   }
          

        document.close();
        
        
        
        return true;
    }
    
    public boolean exportFullsizeTemplate(java.io.File pdfFile, int object)
    {
        java.awt.geom.Path2D.Double geom = null;
        
        if (object == snoCADutilities.EDIT_BOARD) 
        {
            geom = m_bp.getBoardGeometry() ;
        }
        else if (object == snoCADutilities.EDIT_CORE)
        {
            geom = m_bp.getCoreGeometry();
        }
        else if (object == snoCADutilities.EDIT_NOSE_TIPSPACER)
        {
            m_bp.getCoreGeometry();
            geom = m_bp.getNoseTipspacerGeometry();
        }
        else if (object == snoCADutilities.EDIT_TAIL_TIPSPACER)
        {
            m_bp.getCoreGeometry();
            geom = m_bp.getTailTipspacerGeometry();
        }
        else if (object == snoCADutilities.EDIT_PROFILE)
        {
            geom = m_bp.getProfileGeometry();
        }
        else if (object == snoCADutilities.EDIT_FLEX)
        {
            geom = m_bp.getFlexGeometry();
        }
        else
        {
            geom = m_bp.getBoardGeometry();
        }
          int maxWidth = (int)Math.round(m_board.getScaleFactor() * geom.getBounds2D().getHeight());
          maxWidth += m_board.getGraphicsPrintBorder() * 2;
          
          int maxLength = (int)Math.round(m_board.getScaleFactor() * geom.getBounds2D().getWidth()) + (m_board.getGraphicsPrintBorder() * 2);
          
          com.lowagie.text.Rectangle sizeRect = new com.lowagie.text.Rectangle(pdfScaleInt(maxLength) , pdfScaleInt(maxWidth) );
          com.lowagie.text.Document document = new com.lowagie.text.Document(sizeRect);
  
          try 
           {
               com.lowagie.text.Font mainTitle = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA_BOLD, 10, com.lowagie.text.Font.BOLD);
               com.lowagie.text.Font subTitle = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 8, com.lowagie.text.Font.NORMAL);
               com.lowagie.text.Font normalText = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 6, com.lowagie.text.Font.NORMAL);
               com.lowagie.text.Font credits = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 4, com.lowagie.text.Font.BOLD);
        
			
	       com.lowagie.text.pdf.PdfWriter writer = com.lowagie.text.pdf.PdfWriter.getInstance(document, new java.io.FileOutputStream(pdfFile.getAbsolutePath()));
               document.open();
               com.lowagie.text.pdf.PdfContentByte cb = writer.getDirectContent();
               
               cb.setLineDash(pdfScaleFloat(2), pdfScaleFloat(1), 0f);
               cb.setColorStroke(java.awt.Color.lightGray);
               
               float leftEnd = 0;
               float rightEnd = sizeRect.getWidth();
               float midAxis = sizeRect.getHeight() / 2;
               float bottom = 0;
               float top = sizeRect.getHeight();
               
               float noseWidePoint = pdfScaleFloat(m_board.getGraphicsPrintBorder() + m_board.getNoseLength());
               float tailWidePoint = noseWidePoint + pdfScaleFloat(m_board.getRunningLength());
               
               float noseCoreWidePoint = pdfScaleFloat(m_board.getGraphicsPrintBorder() + m_board.getCoreNoseLength());
               float tailCoreWidePoint = noseCoreWidePoint + pdfScaleFloat(m_board.getRunningLength());
               
               float midPoint = sizeRect.getWidth() / 2;
     
               cb.moveTo(leftEnd, midAxis);
               cb.lineTo(rightEnd, midAxis);
               
               
               
             if (object == snoCADutilities.EDIT_BOARD)
               {
                       cb.circle(pdfScaleFloat(m_board.getGraphicsPrintBorder() + 10), midAxis, pdfScaleFloat(5));
                       cb.moveTo(noseWidePoint, 0);
                       cb.lineTo(noseWidePoint, sizeRect.getHeight());
                       cb.moveTo(tailWidePoint, 0);
                       cb.lineTo(tailWidePoint, sizeRect.getHeight());
                       cb.moveTo(noseWidePoint + pdfScaleFloat(m_board.getRunningLength() / 2), bottom);
                       cb.lineTo(noseWidePoint + pdfScaleFloat(m_board.getRunningLength() / 2), top);
                       cb.stroke();
               }
                   
               if (object == snoCADutilities.EDIT_CORE || object == snoCADutilities.EDIT_FLEX)
               {
                       cb.moveTo(noseCoreWidePoint, 0);
                       cb.lineTo(noseCoreWidePoint, sizeRect.getHeight());
                       cb.moveTo(tailCoreWidePoint, 0);
                       cb.lineTo(tailCoreWidePoint, sizeRect.getHeight());
                       cb.moveTo(noseCoreWidePoint + pdfScaleFloat(m_board.getRunningLength() / 2), bottom);
                       cb.lineTo(noseCoreWidePoint + pdfScaleFloat(m_board.getRunningLength() / 2), top);
                       cb.stroke();
               }

               cb.stroke();
               cb.setLineDash(0.0f);
               
               drawObject(geom, cb, maxWidth, (int)sizeRect.getHeight(), 0, 0, object, true);
              
               String boardName = m_board.getBoardName();
                   String credit = "Template by snoCAD-X www.grafsnowboards.com";
                   cb.beginText();
                   cb.setFontAndSize(subTitle.getBaseFont(), pdfScaleFloat(5));
                   cb.showTextAligned(cb.ALIGN_LEFT, boardName, pdfScaleFloat(10) + midPoint, pdfScaleFloat(15) + midAxis, 0);
                   cb.setFontAndSize(credits.getBaseFont(), pdfScaleFloat(3));
                   cb.showTextAligned(cb.ALIGN_LEFT, credit, pdfScaleFloat(10) + midPoint, pdfScaleFloat(5) + midAxis, 0);
                   cb.endText();
                   
               if (object == snoCADutilities.EDIT_BOARD || object  == snoCADutilities.EDIT_CORE) 
               {
                   drawInserts(cb, (int)midAxis, 0, 0, object);
               }
                   
           }
           catch (com.lowagie.text.DocumentException de) 
           {
	       System.err.println(de.getMessage());
	   } 
           catch (java.io.IOException ioe) 
           {
	        System.err.println(ioe.getMessage());
	   }
          

        document.close();

        return true;
    }
     
    private void drawInserts(com.lowagie.text.pdf.PdfContentByte cb, int maxWidth, int positionOffsetX, int positionOffsetY, int type)
    {
       float centreLineY = maxWidth - positionOffsetY;
       float frontPackCentre =  m_board.getGraphicsPrintBorder() + ( m_board.getRunningLength() / 2 );

       if (type == snoCADutilities.EDIT_BOARD) frontPackCentre += m_board.getNoseLength();
       if (type == snoCADutilities.EDIT_CORE) frontPackCentre += m_board.getCoreNoseLength();

       frontPackCentre = frontPackCentre - (m_board.getStanceWidth() / 2);
       frontPackCentre = frontPackCentre + (m_board.getStanceSetback());
  
       
       float rearPackCentre = frontPackCentre + m_board.getStanceWidth();

       float frontRowPosX = frontPackCentre - (m_board.getFrontPackRowCount() / 2 * (m_board.getFrontPackInsertSpacing()) - (m_board.getFrontPackInsertSpacing() / 2) );
       float rearRowPosX = rearPackCentre - (m_board.getRearPackRowCount() / 2 * (m_board.getRearPackInsertSpacing()) - (m_board.getRearPackInsertSpacing() / 2) );  

       for (int i = 0; i < m_board.getFrontPackRowCount(); i = i + 1)
       {
           
                  float dist = i * m_board.getFrontPackInsertSpacing() ;
                  float x = pdfScaleFloat(frontRowPosX + dist - positionOffsetX);
                  float yTop = centreLineY + (pdfScaleFloat(20));
                  float yBot = centreLineY - (pdfScaleFloat(20));
                  float five_mm = pdfScaleFloat(5);
                  
                  cb.setColorStroke(java.awt.Color.red);
                  cb.moveTo(x, yTop - five_mm);
                  cb.lineTo(x, yTop + five_mm);
                  cb.moveTo(x - five_mm, yTop);
                  cb.lineTo(x + five_mm, yTop);
                  
                  cb.moveTo(x, yBot - five_mm);
                  cb.lineTo(x, yBot + five_mm);
                  cb.moveTo(x - five_mm, yBot);
                  cb.lineTo(x + five_mm, yBot);

                  cb.stroke();
                  cb.setColorStroke(java.awt.Color.black);
                  cb.circle(x, yTop , pdfScaleFloat(3));
                  cb.circle(x, yBot , pdfScaleFloat(3));
                  cb.stroke();
                  

       }
       
       for (int i = 0; i < m_board.getRearPackRowCount(); i = i + 1)
       {
           
                  float dist = i * m_board.getRearPackInsertSpacing() ;
                  float x = pdfScaleFloat(rearRowPosX + dist - positionOffsetX);
                  float yTop = centreLineY + (pdfScaleFloat(20));
                  float yBot = centreLineY - (pdfScaleFloat(20));
                  float five_mm = pdfScaleFloat(5);
                  
                  cb.setColorStroke(java.awt.Color.red);
                  cb.moveTo(x, yTop - five_mm);
                  cb.lineTo(x, yTop + five_mm);
                  cb.moveTo(x - five_mm, yTop);
                  cb.lineTo(x + five_mm, yTop);
                  
                  cb.moveTo(x, yBot - five_mm);
                  cb.lineTo(x, yBot + five_mm);
                  cb.moveTo(x - five_mm, yBot);
                  cb.lineTo(x + five_mm, yBot);

                  cb.stroke();
                  cb.setColorStroke(java.awt.Color.black);
                  cb.circle(x, yTop , pdfScaleFloat(3));
                  cb.circle(x, yBot , pdfScaleFloat(3));
                  cb.stroke();
                  

       }
     
       // java.util.ArrayList<snoCADutilities.point> points = m_bp.getInsertGeometry();
       /* 
        for(int i = 0; i < points.size(); i++)
        {
            double centre_x = (points.get(i).x - m_bp.getMidPointX()) * m_board.getScaleFactor();
            centre_x = centre_x + m_board.getNoseLength() + (m_board.getRunningLength() / 2);
            double centre_y = ((points.get(i).y - m_bp.getMidPointY()) * m_board.getScaleFactor()) + maxWidth / 2;
            
            centre_x -= positionOffsetX;
            centre_y -= positionOffsetY;
            snoCADutilities.point coordsPoint = new snoCADutilities.point(pdfScale(centre_x), pdfScale(centre_y));
            
            cb.setColorStroke(java.awt.Color.red);
            cb.moveTo((float)coordsPoint.x - pdfScaleFloat(5), (float)coordsPoint.y);
            cb.lineTo((float)coordsPoint.x + pdfScaleFloat(5), (float)coordsPoint.y);
            cb.moveTo((float)coordsPoint.x, (float)coordsPoint.y - pdfScaleFloat(5));
            cb.lineTo((float)coordsPoint.x, (float)coordsPoint.y + pdfScaleFloat(5));
            cb.stroke();
            
            cb.setColorStroke(java.awt.Color.black);
            cb.circle((float)coordsPoint.x, (float)coordsPoint.y, pdfScaleFloat(3));
            cb.stroke();
        }
        */
      
      
    }
     
    private void drawObject(java.awt.geom.Path2D.Double path, com.lowagie.text.pdf.PdfContentByte cb, int maxWidth, int pageHeight, int positionOffsetX, int positionOffsetY, int object, boolean centred)
    {
        java.awt.geom.PathIterator pI = path.getPathIterator(null, 0);
        cb.setColorStroke(java.awt.Color.black);
        cb.setLineWidth(1f);
        cb.moveTo(0.0f, 0.0f);
        boolean firstPoint = true;
        double leftmost = path.getBounds2D().getMinX();
        double lowest = path.getBounds2D().getMinY();
        
        if (centred)
        {
            double centreX = path.getBounds2D().getCenterX();
            double centreY = path.getBounds2D().getCenterY();
            double height_diff = centreY - lowest;
            lowest = lowest + height_diff;
        }
        
        while (!pI.isDone())
        {
            
            double[] coords = new double[2];
            pI.currentSegment(coords);
            coords[0] = (coords[0] - leftmost  ) * m_board.getScaleFactor();
            coords[1] = ((lowest - coords[1] ) * m_board.getScaleFactor()) ;
            snoCADutilities.point coordsPoint = new snoCADutilities.point(pdfScale(coords[0] + m_board.getGraphicsPrintBorder() - positionOffsetX) , pdfScale(coords[1])+ (pageHeight / 2) + pdfScale(positionOffsetY));
            
            if (firstPoint)
            {
                cb.moveTo((float)coordsPoint.x,(float)coordsPoint.y);
                firstPoint = false;
            }
            else
            {  
                cb.lineTo((float)coordsPoint.x,(float)coordsPoint.y);
            }
            
            pI.next();
        }
        
        cb.stroke();
    }
    
    private void drawSplitObject(java.awt.geom.Path2D.Double path, com.lowagie.text.pdf.PdfContentByte cb, int offsetX, int offsetY)
    {
        java.awt.geom.PathIterator pI = path.getPathIterator(null, 0);
        cb.setColorStroke(java.awt.Color.black);
        cb.setLineWidth(1f);
        cb.moveTo(0.0f, 0.0f);
        
        boolean firstPoint = true;
        double leftmost = path.getBounds2D().getMinX();
        double lowest = path.getBounds2D().getMinY();
        double centreX = path.getBounds2D().getCenterX();
        double centreY = path.getBounds2D().getCenterY();
        double height_diff = centreY - lowest;
        lowest = lowest + ( 2 * height_diff);
        
        while (!pI.isDone())
        {
            
            double[] coords = new double[2];
            pI.currentSegment(coords);
            coords[0] = (coords[0] - leftmost  ) * m_board.getScaleFactor();
            coords[1] = ((lowest - coords[1] ) * m_board.getScaleFactor()) ;
            
            snoCADutilities.point coordsPoint = new snoCADutilities.point(pdfScale(coords[0] + m_board.getGraphicsPrintBorder() - offsetX) , 
                                                                          pdfScale(coords[1] + m_board.getGraphicsPrintBorder() - offsetY));

            if (firstPoint)
            {
                cb.moveTo((float)coordsPoint.x,(float)coordsPoint.y);
                firstPoint = false;
            }
            else
            {  
                cb.lineTo((float)coordsPoint.x,(float)coordsPoint.y);
            }
            
            pI.next();
        }
        
        cb.stroke();
        
    }
    
    private void addCell(com.lowagie.text.pdf.PdfPTable table, String contents)
    {
        com.lowagie.text.pdf.PdfPCell cell = new com.lowagie.text.pdf.PdfPCell(new com.lowagie.text.Paragraph(contents));
        cell.setBorderColorBottom(java.awt.Color.white);
        cell.setBorderColorLeft(java.awt.Color.white);
        cell.setBorderColorRight(java.awt.Color.white);
        cell.setBorderColorTop(java.awt.Color.lightGray);
        cell.setBorderWidthBottom(5);
        cell.setBorder(1);
        cell.setMinimumHeight(20);
       
        table.addCell(cell);
    }

    
    private com.lowagie.text.pdf.PdfPTable getDimensionsTable(int mode)
    {
            com.lowagie.text.Font mainTitle = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA_BOLD, 24, com.lowagie.text.Font.BOLD);
            com.lowagie.text.Font subTitle = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 16, com.lowagie.text.Font.NORMAL);
            com.lowagie.text.Font normalText = com.lowagie.text.FontFactory.getFont(com.lowagie.text.FontFactory.HELVETICA, 12, com.lowagie.text.Font.NORMAL);
            
            com.lowagie.text.pdf.PdfPTable dimTable = new com.lowagie.text.pdf.PdfPTable(2);
           
            addCell(dimTable,"Overall Length");
            addCell(dimTable,Integer.toString(m_board.getLength()));
            addCell(dimTable,"Running Length");
            addCell(dimTable,Integer.toString(m_board.getRunningLength()));
            addCell(dimTable,"Nose Length");
            addCell(dimTable,Integer.toString(m_board.getNoseLength()));
            addCell(dimTable,"Tail Length");
            addCell(dimTable,Integer.toString(m_board.getTailLength()));
            addCell(dimTable,"Nose Width");
            addCell(dimTable,Integer.toString(m_board.getNoseWidth()));
            addCell(dimTable,"Tail Width");
            addCell(dimTable,Integer.toString(m_board.getTailWidth()));
            addCell(dimTable,"Waist Width");
            addCell(dimTable,snoCADutilities.formatDouble(m_board.getWaistWidth()));
            addCell(dimTable,"Sidecut Radius");
            addCell(dimTable,Integer.toString(m_board.getSidecutRadius()));
            addCell(dimTable,"Sidecut Bias");
            addCell(dimTable,Integer.toString(m_board.getSidecutBias()));
            addCell(dimTable,"Stance Width");
            addCell(dimTable,Integer.toString(m_board.getStanceWidth()));
            addCell(dimTable,"Stance Setback");
            addCell(dimTable,Integer.toString(m_board.getStanceSetback()));
            addCell(dimTable,"Nose Height");
            addCell(dimTable,snoCADutilities.formatDouble(m_board.getNoseHeight()));
            addCell(dimTable,"Tail Height");
            addCell(dimTable,snoCADutilities.formatDouble(m_board.getTailHeight()));
            addCell(dimTable,"Camber");
            addCell(dimTable,Integer.toString(m_board.getCamber()));
            addCell(dimTable,"Camber Setback");
            addCell(dimTable,Integer.toString(m_board.getCamberSetback()));
     
            return dimTable;
    }
    
    public void setBoard(snoCADboard board) { m_board = board; }
    public void setBoardDisplay(snoCADboardDisplay bp) { m_bp = bp;}
    private snoCADboard m_board;
    private snoCADboardDisplay m_bp;
    
    
}
