/*
 * Copyright 2007-2014 Daniel Graf (https://github.com/danielgraf)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * snoCADrailShaper.java
 *
 * Created on 04 April 2007, 10:48
 */

package snocadx;

/**
 *
 * @author  dgraf
 */
public class snoCADrailShaper extends javax.swing.JDialog{
    
    /**
     * Creates new form snoCADrailShaper
     */
    
    public snoCADrailShaper() 
    {
        initComponents();
    }
    
    public void setupVariables()
    {
        int serrationDepth = (int)Math.round(m_bp.getBoard().getSerrationDepth() * 10);
        
        m_serrationDepth.setValue(serrationDepth);
        int serrationCount = m_bp.getBoard().getSerrationCount();
        
        
        if (serrationCount == 0) m_serrationNodes.setSelectedIndex(0);
        if (serrationCount == 2) m_serrationNodes.setSelectedIndex(1);
        if (serrationCount == 4) m_serrationNodes.setSelectedIndex(2);
        if (serrationCount == 10) m_serrationNodes.setSelectedIndex(3);
        if (serrationCount == 14) m_serrationNodes.setSelectedIndex(4);
        if (serrationCount == 20) m_serrationNodes.setSelectedIndex(5);
        
        double serrDepth = (double)m_serrationDepth.getValue() / 10;
        m_serrationDepthLabel.setText("Serration Depth : " + Double.toString(serrDepth) + "mm");
        
      
        double smoothnessVal = m_bp.getBoard().getRailGeometry().getSmoothingPercent();

        m_convex.setSelected(m_bp.getBoard().getConvexRails());
        
        m_currentPoint = 0;
        
        if (m_bp.getBoard().getRailType() == snoCADutilities.QUADRATIC)
        {
            m_railType.setSelectedIndex(0);
            enableQuadratic();
        }
        
        if (m_bp.getBoard().getRailType() == snoCADutilities.MULTIPOINT_FREE)
        {
            m_railType.setSelectedIndex(1);
            disableQuadratic();
        }
        
        m_bp.setRailShaper(this);
        

    }
    public snoCADrailShaper(snoCADboardDisplay bp) {
        
        m_bp = bp;
        initComponents();
        
        setModal(true);
        setModalityType(java.awt.Dialog.ModalityType.TOOLKIT_MODAL);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        setAlwaysOnTop(true);
        setupVariables();
        
        m_serrationDepth.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent e) 
            {
                  double serrDepth = (double)m_serrationDepth.getValue() / 10;
                  m_bp.getBoard().setSerrationDepth(serrDepth);
                  
                  m_serrationDepthLabel.setText("Serration Depth : " + Double.toString(serrDepth) + "mm");
                  m_bp.repaint(); 
            }
        }) ;

    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        m_convex = new javax.swing.JCheckBox();
        m_serrationNodesLabel = new javax.swing.JLabel();
        m_serrationDepthLabel = new javax.swing.JLabel();
        m_serrationDepth = new javax.swing.JSlider();
        m_serrationNodes = new javax.swing.JComboBox();
        RailTypeLabel = new javax.swing.JLabel();
        m_railType = new javax.swing.JComboBox();
        m_close = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Rails"));
        m_convex.setText("Convex");
        m_convex.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        m_convex.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        m_convex.setMargin(new java.awt.Insets(0, 0, 0, 0));
        m_convex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnChangeConcave(evt);
            }
        });

        m_serrationNodesLabel.setText("Serration Nodes");

        m_serrationDepthLabel.setText("Serration Depth");

        m_serrationDepth.setMinorTickSpacing(5);
        m_serrationDepth.setPaintTicks(true);
        m_serrationDepth.setValue(0);
        m_serrationDepth.setMaximumSize(new java.awt.Dimension(100, 32));

        m_serrationNodes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "2", "4", "10", "14", "20" }));
        m_serrationNodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnChangeSerrationNodes(evt);
            }
        });

        RailTypeLabel.setText("Rail Type");

        m_railType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Quadratic", "7 Point Spline" }));
        m_railType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnChangeRailType(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, m_serrationDepthLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                    .add(RailTypeLabel)
                    .add(m_convex)
                    .add(m_serrationNodesLabel)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, m_serrationNodes, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, m_railType, 0, 114, Short.MAX_VALUE))
                    .add(m_serrationDepth, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(RailTypeLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_railType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_convex)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_serrationNodesLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_serrationNodes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(m_serrationDepthLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_serrationDepth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        m_close.setText("Close");
        m_close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnClose(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(191, Short.MAX_VALUE)
                .add(m_close)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(m_close)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OnChangeRailType(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnChangeRailType

        int railIdx = m_railType.getSelectedIndex();
        
        if (railIdx == 0)
        {
            m_bp.getBoard().setRailType(snoCADutilities.QUADRATIC);
            enableQuadratic();
        }
        
        if (railIdx == 1)
        {
            m_bp.getBoard().setRailType(snoCADutilities.MULTIPOINT_FREE);
            
            disableQuadratic();
            updateMultipoint(); 
            
            if (m_bp.getBoard().getRailGeometry().getSize() < 5)
            {
                 m_bp.getBoard().getRailGeometry().deleteAll();
                 m_bp.getBoard().getRailGeometry().addElement(12.5, m_bp.getBoard().getNoseWidth());
                 m_bp.getBoard().getRailGeometry().addElement(37.5, m_bp.getBoard().getTailWidth());
                 m_bp.getBoard().getRailGeometry().addElement(50, m_bp.getBoard().getTailWidth());
                 m_bp.getBoard().getRailGeometry().addElement(62.5, m_bp.getBoard().getTailWidth());
                 m_bp.getBoard().getRailGeometry().addElement(87.5, m_bp.getBoard().getTailWidth());
            }
            
            double ww = m_bp.getBoard().getRailGeometry().getEntry(2).getWidth() ;
            m_bp.getBoard().setWaistWidth(ww);
            m_bp.updateHandles();
            m_bp.updateStatsPanel();
        }
        
        m_bp.repaint();
        
    }//GEN-LAST:event_OnChangeRailType

    private void updateMultipoint()
    {

         m_bp.updateHandles();
         m_bp.repaint();
    }
    private void disableQuadratic()
    {
        m_serrationDepth.setEnabled(false);
        m_serrationDepthLabel.setEnabled(false);
        m_serrationNodes.setEnabled(false);
        m_serrationNodesLabel.setEnabled(false);
        m_convex.setEnabled(false);
    }
    
    private void enableQuadratic()
    {
        m_serrationDepth.setEnabled(true);
        m_serrationDepthLabel.setEnabled(true);
        m_serrationNodes.setEnabled(true);
        m_serrationNodesLabel.setEnabled(true);
        m_convex.setEnabled(true);
    }
    
    private void OnChangeSerrationNodes(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnChangeSerrationNodes
// TODO add your handling code here:
        
        int serrationNodesIdx = m_serrationNodes.getSelectedIndex();
        
        if (serrationNodesIdx == 0) m_bp.getBoard().setSerrationCount(0);
        if (serrationNodesIdx == 1) m_bp.getBoard().setSerrationCount(2);
        if (serrationNodesIdx == 2) m_bp.getBoard().setSerrationCount(4);
        if (serrationNodesIdx == 3) m_bp.getBoard().setSerrationCount(10);
        if (serrationNodesIdx == 4) m_bp.getBoard().setSerrationCount(14);
        if (serrationNodesIdx == 5) m_bp.getBoard().setSerrationCount(20);
        
        m_bp.repaint();
        
    }//GEN-LAST:event_OnChangeSerrationNodes

    private void OnClose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnClose
        
        this.dispose();
    }//GEN-LAST:event_OnClose

    private void OnChangeConcave(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnChangeConcave

        m_bp.getBoard().setConvexRails(m_convex.isSelected());
        m_bp.repaint();
    }//GEN-LAST:event_OnChangeConcave
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new snoCADrailShaper().setVisible(true);
            }
        });
    }
    
    private int m_currentPoint;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel RailTypeLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton m_close;
    private javax.swing.JCheckBox m_convex;
    private javax.swing.JComboBox m_railType;
    private javax.swing.JSlider m_serrationDepth;
    private javax.swing.JLabel m_serrationDepthLabel;
    private javax.swing.JComboBox m_serrationNodes;
    private javax.swing.JLabel m_serrationNodesLabel;
    // End of variables declaration//GEN-END:variables
    private snoCADboardDisplay m_bp;
}
