/*
 * Copyright 2007-2014 Daniel Graf (https://github.com/danielgraf)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * snoCADstatsPanel.java
 *
 * Created on 24 March 2007, 23:04
 */

package snocadx;

/**
 *
 * @author  dgraf
 */
public class snoCADstatsPanel extends javax.swing.JPanel {
    
    /** Creates new form snoCADstatsPanel */
    public snoCADstatsPanel() {
        initComponents();
        m_lastUsedPath = null;
        
        //m_htmlOutput.setContentType("text/plain");
     
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layoutGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        exportButton = new javax.swing.JButton();
        vertical = new javax.swing.JRadioButton();
        horizontal = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        m_rlField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        m_lenField = new javax.swing.JTextField();
        m_nlField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        m_tlField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        m_nwField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        m_twField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        m_wwField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        m_scrField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        m_scbField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        m_swField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        m_sbField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        m_nhField = new javax.swing.JTextField();
        m_thField = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Board Properties"));
        setForeground(new java.awt.Color(255, 255, 255));
        setAutoscrolls(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Export Dimensions"));

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnExportDimensions(evt);
            }
        });

        layoutGroup.add(vertical);
        vertical.setSelected(true);
        vertical.setText("Vertical");
        vertical.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        vertical.setMargin(new java.awt.Insets(0, 0, 0, 0));
        vertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnGoVertical(evt);
            }
        });

        layoutGroup.add(horizontal);
        horizontal.setText("Horizontal");
        horizontal.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        horizontal.setMargin(new java.awt.Insets(0, 0, 0, 0));
        horizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnGoHorizontal(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(vertical)
                    .add(horizontal)
                    .add(exportButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(vertical)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(horizontal)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(exportButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Edit Board Name...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OnEditBoardName(evt);
            }
        });

        m_rlField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_rlFieldOnEdit(evt);
            }
        });
        m_rlField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_rlFieldOnType(evt);
            }
        });

        jLabel1.setText("Running Length");

        jLabel2.setText("Overall Length");

        m_lenField.setFocusable(false);

        m_nlField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_nlFieldOnEdit(evt);
            }
        });
        m_nlField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_nlFieldOnType(evt);
            }
        });

        jLabel3.setText("Nose Length");

        m_tlField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_tlFieldOnEditRL(evt);
            }
        });
        m_tlField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_tlFieldOnType(evt);
            }
        });

        jLabel4.setText("Tail Length");

        m_nwField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_nwFieldOnEdit(evt);
            }
        });
        m_nwField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_nwFieldOnType(evt);
            }
        });

        jLabel5.setText("Nose Width");

        m_twField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_twFieldOnEdit(evt);
            }
        });
        m_twField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_twFieldOnType(evt);
            }
        });

        jLabel6.setText("Tail Width");

        m_wwField.setFocusable(false);

        jLabel7.setText("Waist Width");

        m_scrField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_scrFieldOnEdit(evt);
            }
        });
        m_scrField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_scrFieldOnType(evt);
            }
        });

        jLabel8.setText("Sidecut Radius");

        jLabel10.setText("Sidecut Bias");

        m_scbField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_scbFieldOnEdit(evt);
            }
        });
        m_scbField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_scbFieldOnType(evt);
            }
        });

        jLabel11.setText("Stance Width");

        m_swField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_swFieldOnEdit(evt);
            }
        });
        m_swField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_swFieldOnType(evt);
            }
        });

        jLabel12.setText("Stance Setback");

        m_sbField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_sbFieldOnEdit(evt);
            }
        });
        m_sbField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_sbFieldOnType(evt);
            }
        });

        jLabel9.setText("Nose Height");

        jLabel13.setText("Tail Height");

        m_nhField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_nhFieldOnEditRL(evt);
            }
        });
        m_nhField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_nhFieldOnType(evt);
            }
        });

        m_thField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                m_thFieldOnEditRL(evt);
            }
        });
        m_thField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                m_thFieldOnType(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_nlField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_tlField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(m_rlField)
                            .add(m_lenField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(jLabel13)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_thField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_nhField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_nwField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_twField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_wwField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(10, 10, 10))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_scrField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel10)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_scbField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(jLabel11)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(m_swField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton1)
                            .add(layout.createSequentialGroup()
                                .add(jLabel12)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(m_sbField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 95, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jButton1)
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(m_lenField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(m_rlField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(m_nlField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(m_tlField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel9)
                    .add(m_nhField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel13)
                    .add(m_thField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(m_nwField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(m_twField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(m_wwField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(m_scrField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(m_scbField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(m_swField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(m_sbField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void m_sbFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_sbFieldOnType
// TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_sbFieldOnType

    private void m_sbFieldOnEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_sbFieldOnEdit
// TODO add your handling code here:
        m_board.setStanceSetback(Integer.parseInt(m_sbField.getText()));
        m_boardDisplay.repaint();
        updateStats();
    }//GEN-LAST:event_m_sbFieldOnEdit

    private void m_swFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_swFieldOnType
// TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_swFieldOnType

    private void m_swFieldOnEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_swFieldOnEdit
// TODO add your handling code here:
        m_board.setStanceWidth(Integer.parseInt(m_swField.getText()));
        m_boardDisplay.repaint();
        updateStats();
    }//GEN-LAST:event_m_swFieldOnEdit

    private void m_scbFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_scbFieldOnType
// TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_scbFieldOnType

    private void m_scbFieldOnEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_scbFieldOnEdit
// TODO add your handling code here:
        m_board.setSidecutBias(Integer.parseInt(m_scbField.getText()));
        m_boardDisplay.repaint();
        updateStats();
    }//GEN-LAST:event_m_scbFieldOnEdit

    private void m_scrFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_scrFieldOnType
// TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_scrFieldOnType

    private void m_scrFieldOnEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_scrFieldOnEdit
// TODO add your handling code here:
        m_board.setSidecutRadius(Integer.parseInt(m_scrField.getText()));
        updateStats();
        m_boardDisplay.repaint();
        updateStats();
    }//GEN-LAST:event_m_scrFieldOnEdit

    private void m_twFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_twFieldOnType
// TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_twFieldOnType

    private void m_twFieldOnEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_twFieldOnEdit
// TODO add your handling code here:
        m_board.setTailWidth(Integer.parseInt(m_twField.getText()));
        updateStats();
        m_boardDisplay.repaint();
        updateStats();
    }//GEN-LAST:event_m_twFieldOnEdit

    private void m_nwFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_nwFieldOnType
// TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_nwFieldOnType

    private void m_nwFieldOnEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_nwFieldOnEdit
// TODO add your handling code here:
        m_board.setNoseWidth(Integer.parseInt(m_nwField.getText()));
        m_boardDisplay.repaint();
        updateStats();
    }//GEN-LAST:event_m_nwFieldOnEdit

    private void m_tlFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_tlFieldOnType
// TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_tlFieldOnType

    private void m_tlFieldOnEditRL(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_tlFieldOnEditRL
// TODO add your handling code here:
        m_board.setTailLength(Integer.parseInt(m_tlField.getText()));
        m_boardDisplay.repaint();
        updateStats();
    }//GEN-LAST:event_m_tlFieldOnEditRL

    private void m_nlFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_nlFieldOnType
// TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_nlFieldOnType

    private void m_nlFieldOnEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_nlFieldOnEdit
// TODO add your handling code here:
        m_board.setNoseLength(Integer.parseInt(m_nlField.getText()));
        m_boardDisplay.repaint();
        updateStats();
    }//GEN-LAST:event_m_nlFieldOnEdit

    private void m_rlFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_rlFieldOnType
// TODO add your handling code here:
        restrictNumeric(evt);

    }//GEN-LAST:event_m_rlFieldOnType

    private void m_rlFieldOnEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_rlFieldOnEdit
        m_board.setRunningLength(Integer.parseInt(m_rlField.getText()));
        m_boardDisplay.repaint();
        updateStats();
    }//GEN-LAST:event_m_rlFieldOnEdit

    private void OnEditBoardName(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnEditBoardName
   
        String name =(String)javax.swing.JOptionPane.showInputDialog(
                    this,
                    "Choose a name for this board:\n",
                    "Board Name",
                    javax.swing.JOptionPane.PLAIN_MESSAGE);
        
         m_board.setBoardName(name);
         m_parentFrame.setTitle(m_board.getBoardName());
         updateStats();
                 
    }//GEN-LAST:event_OnEditBoardName

    private void OnGoHorizontal(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnGoHorizontal

    }//GEN-LAST:event_OnGoHorizontal

    private void OnGoVertical(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnGoVertical

    }//GEN-LAST:event_OnGoVertical

    public void exportDimensions(boolean vertical)
    {
        final javax.swing.JFileChooser fc = new javax.swing.JFileChooser(m_lastUsedPath);
        
        fc.setFileFilter(new snoCADfileFilters().getHTMLfilter());
        fc.setSelectedFile(new java.io.File(m_board.getBoardName().replace(" ", "_") + "_dimensions_table.htm"));
        fc.setDialogTitle("Export HTML...");
        
        int returnVal = fc.showSaveDialog(this);
        
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) 
        {
            java.io.File htm = fc.getSelectedFile();
            
            try 
            {
                m_lastUsedPath = htm.getCanonicalPath();
            } 
            catch (java.io.IOException ex) 
            {
                ex.printStackTrace();
            }
            
            if (!htm.getName().toLowerCase().endsWith(".htm") && !htm.getName().toLowerCase().endsWith(".html"))
            {
                 // File (or directory) with new name
                 htm = new java.io.File(htm.getAbsolutePath() + ".html");
                 
                 // Rename file (or directory)
                 boolean success = htm.renameTo(htm);
                 
                 if (!success) 
                 {
                     // File was not successfully renamed
                 }
            }

            if (htm != null)
            {
                try 
                {
                    String html = "";
                    
                    if (!vertical)
                    {
                        html = getHTML(1, true);
                    }
                    else
                    {
                        html = getHTML(0, true);
                    }
                    
                    java.io.BufferedWriter out = new java.io.BufferedWriter(new java.io.FileWriter(htm.getCanonicalPath()));
                    out.write(html);
                    out.close();
                } 
                catch (java.io.IOException e) 
                {
                    
                }
                
                
        }
        }
        else 
        {
            // File was not opened
        }
        
    }
    private void OnExportDimensions(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OnExportDimensions

        exportDimensions(vertical.isSelected());
 
    }//GEN-LAST:event_OnExportDimensions

    private void m_nhFieldOnEditRL(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_nhFieldOnEditRL
        // TODO add your handling code here:
        m_board.setNoseHeight(Integer.parseInt(m_nhField.getText()));
        m_boardDisplay.repaint();
    }//GEN-LAST:event_m_nhFieldOnEditRL

    private void m_nhFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_nhFieldOnType
        // TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_nhFieldOnType

    private void m_thFieldOnEditRL(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_m_thFieldOnEditRL
        // TODO add your handling code here:
        m_board.setTailHeight(Integer.parseInt(m_thField.getText()));
        m_boardDisplay.repaint();
    }//GEN-LAST:event_m_thFieldOnEditRL

    private void m_thFieldOnType(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_m_thFieldOnType
        // TODO add your handling code here:
        restrictNumeric(evt);
    }//GEN-LAST:event_m_thFieldOnType
    private void restrictNumeric(java.awt.event.KeyEvent evt)
    {
         if ((evt.getKeyChar() < '0') || (evt.getKeyChar() > '9'))
            evt.consume();
    }
    public boolean waistWidthSet()
    {
        double test = m_board.getWaistWidth(); 
        boolean waistWidthSet = m_board.getWaistWidth() != 0.0;
        return waistWidthSet;
    }
    public String getHTML(int mode, boolean forExport)
    {
        // Mode : 0 = Vertical (data in columns)
        //      : 1 = Horizonal (all one one row)
        
        if (m_boardDisplay != null)
        {
            m_boardDisplay.getBoardGeometry();
        }
        m_lenField.setText(String.valueOf(m_board.getLength()));
        m_rlField.setText(String.valueOf(m_board.getRunningLength()));
        m_nlField.setText(String.valueOf(m_board.getNoseLength()));
        m_tlField.setText(String.valueOf(m_board.getTailLength()));
        m_nhField.setText(String.valueOf(m_board.getNoseHeight()));
        m_thField.setText(String.valueOf(m_board.getTailHeight()));
        m_nwField.setText(String.valueOf(m_board.getNoseWidth()));
        m_twField.setText(String.valueOf(m_board.getTailWidth()));
        m_scrField.setText(String.valueOf(m_board.getSidecutRadius()));
        m_scbField.setText(String.valueOf(m_board.getSidecutBias()));
        m_swField.setText(String.valueOf(m_board.getStanceWidth()));
        m_sbField.setText(String.valueOf(m_board.getStanceSetback()));
        m_wwField.setText(String.valueOf(snoCADutilities.formatDouble(m_board.getWaistWidth())));
        

        
        String htmlOutput = "";
        
        if (forExport)
        {
            htmlOutput = "<HTML><HEAD><style type=\"text/css\">TD{font: 10px arial}TD.title{font: bold 12px arial; align: left}</style></HEAD><BODY><TABLE border=1>";
        }
        else
        {
            htmlOutput = "<HTML><HEAD><style type=\"text/css\">TD{font: 8px arial; color: black}TD.value{font: 8px arial; color: gray}TD.title{font: bold 10px arial; color: black}</style></HEAD><BODY><TABLE>";
        }
        double test = m_board.getWaistWidth();
        
        if (mode == 0)
        {
           
            ///htmlOutput += addTITLErow("Item", "Dimension");
            htmlOutput += addHTMLrow("Name", m_board.getBoardName());
            htmlOutput += addHTMLrow("Overall Length", m_board.getLength());
            htmlOutput += addHTMLrow("Running Length", m_board.getRunningLength());
            htmlOutput += addHTMLrow("Nose Length", m_board.getNoseLength());
            htmlOutput += addHTMLrow("Tail Length", m_board.getTailLength());
            htmlOutput += addHTMLrow("Nose Width", m_board.getNoseWidth());
            htmlOutput += addHTMLrow("Tail Width", m_board.getTailWidth());
            htmlOutput += addHTMLrow("Waist Width", m_board.getWaistWidth());
            htmlOutput += addHTMLrow("Sidecut Radius", m_board.getSidecutRadius());
            htmlOutput += addHTMLrow("Sidecut Bias", m_board.getSidecutBias());
            htmlOutput += addHTMLrow("Stance Width", m_board.getStanceWidth());
            htmlOutput += addHTMLrow("Stance Setback", m_board.getStanceSetback());
            htmlOutput += addHTMLrow("Nose Height", m_board.getNoseHeight());
            htmlOutput += addHTMLrow("Tail Height", m_board.getTailHeight());
            htmlOutput += addHTMLrow("Camber", m_board.getCamber());
            htmlOutput += addHTMLrow("Camber Setback", m_board.getCamberSetback());
        }
        
        if (mode == 1)
        {
            htmlOutput += "<TR>";
            htmlOutput += addTITLEcol("Name");
            htmlOutput += addTITLEcol("Overall Length");
            htmlOutput += addTITLEcol("Running Length");
            htmlOutput += addTITLEcol("Nose Length");
            htmlOutput += addTITLEcol("Tail Length");
            htmlOutput += addTITLEcol("Nose Width");
            htmlOutput += addTITLEcol("Tail Width");
            htmlOutput += addTITLEcol("Waist Width");
            htmlOutput += addTITLEcol("Sidecut Radius");
            htmlOutput += addTITLEcol("Sidecut Bias");
            htmlOutput += addTITLEcol("Stance Width");
            htmlOutput += addTITLEcol("Stance Setback");
            htmlOutput += addTITLEcol("Nose Height");
            htmlOutput += addTITLEcol("Tail Height");
            htmlOutput += addTITLEcol("Camber");
            htmlOutput += addTITLEcol("Camber Setback");
            htmlOutput += "</TR><TR>";
            htmlOutput += addHTMLcol(m_board.getBoardName());
            htmlOutput += addHTMLcol(m_board.getLength());
            htmlOutput += addHTMLcol(m_board.getRunningLength());
            htmlOutput += addHTMLcol(m_board.getNoseLength());
            htmlOutput += addHTMLcol(m_board.getTailLength());
            htmlOutput += addHTMLcol(m_board.getNoseWidth());
            htmlOutput += addHTMLcol(m_board.getTailWidth());
            htmlOutput += addHTMLcol(m_board.getWaistWidth());
            htmlOutput += addHTMLcol(m_board.getSidecutRadius());
            htmlOutput += addHTMLcol(m_board.getSidecutBias());
            htmlOutput += addHTMLcol(m_board.getStanceWidth());
            htmlOutput += addHTMLcol(m_board.getStanceSetback());
            htmlOutput += addHTMLcol(m_board.getNoseHeight());
            htmlOutput += addHTMLcol(m_board.getTailHeight());
            htmlOutput += addHTMLcol(m_board.getCamber());
            htmlOutput += addHTMLcol(m_board.getCamberSetback());
            htmlOutput += "</TR>";
            
        }
        
        htmlOutput += "</TABLE></BODY></HTML>";
        return htmlOutput;
        
    }
 
    private String addTITLErow(String category, String value)
    {
        String tableRow = "<TR><TD class=\"title\">" + category + "</TD><TD class=\"title\">" + value + "</TD></TR>";
        return tableRow;
    }
    private String addHTMLrow(String category, String value)
    {
        String tableRow = "<TR><TD>" + category + "</TD><TD class=\"value\">" + value + "</TD></TR>";
        return tableRow;
    }
    
    private String addHTMLrow(String category, int value)
    {
        String tableRow = "<TR><TD>" + category + "</TD><TD class=\"value\">" + Integer.toString(value) + "</TD></TR>";
        return tableRow;
    }
    
    private String addHTMLrow(String category, double value)
    {
        String tableRow = "<TR><TD>" + category + "</TD><TD class=\"value\">" + snoCADutilities.formatDouble(value) + "</TD></TR>";
        return tableRow;
    }
    
    
    
    private String addHTMLcol(String value)
    {
        String tableRow = "<TD>" + value + "</TD>";
        return tableRow;
    }
    
    private String addTITLEcol(String value)
    {
        String tableRow = "<TD class=\"title\">" + value + "</TD>";
        return tableRow;
    }
    
    private String addHTMLcol(int value)
    {
        String tableRow = "<TD>" + Integer.toString(value) + "</TD>";
        return tableRow;
    }
    
    private String addHTMLcol(double value)
    {
        String tableRow = "<TD>" + snoCADutilities.formatDouble(value) + "</TD>";
        return tableRow;
    }
    
    public void updateStats()
    {
        m_htmlOutput = getHTML(0, false);
    }
   

    public void setBoard(snoCADboard b) { m_board = b; updateStats();}
    public void setBoardDisplay(snoCADboardDisplay bd) { m_boardDisplay = bd;}
     
    public void setContainingFrame(javax.swing.JInternalFrame parent) { m_parentFrame = parent;}
    
    private snoCADboard m_board;
    private String m_lastUsedPath;
    private javax.swing.JInternalFrame m_parentFrame;
    private String m_htmlOutput;
    private snoCADboardDisplay m_boardDisplay;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JRadioButton horizontal;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.ButtonGroup layoutGroup;
    private javax.swing.JTextField m_lenField;
    private javax.swing.JTextField m_nhField;
    private javax.swing.JTextField m_nlField;
    private javax.swing.JTextField m_nwField;
    private javax.swing.JTextField m_rlField;
    private javax.swing.JTextField m_sbField;
    private javax.swing.JTextField m_scbField;
    private javax.swing.JTextField m_scrField;
    private javax.swing.JTextField m_swField;
    private javax.swing.JTextField m_thField;
    private javax.swing.JTextField m_tlField;
    private javax.swing.JTextField m_twField;
    private javax.swing.JTextField m_wwField;
    private javax.swing.JRadioButton vertical;
    // End of variables declaration//GEN-END:variables
    
}
